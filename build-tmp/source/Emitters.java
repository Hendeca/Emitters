import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import java.util.Random; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class Emitters extends PApplet {

 

int i = 0; // For looping
Emitter[] emitters;
RNG rng = new RNG();

public void setup() {
  frameRate(29.97f);
  size(1440, 900);
  background(0);
  emitters = new Emitter[20];
  initEmitters();
}

public void initEmitters() {
  for ( i = 0; i < emitters.length; i++) {
   
   emitters[i] = new Emitter(new PVector(0, 0), new PVector(random(-0.02f, 0.02f),0), new PVector(0, 0), new PVector(3.0f,3.0f), new PVector(1.0f, 1.0f), new PVector(0.02f, 0.02f), new PVector(0.1f, 0.1f), random(0.96f, 0.99f), random(50, 100), new ColorCycle(random(0.2f, 0.4f), 0, 2, 4, random(50, 255)));
  
  }
}

public void draw() {
  background(0);
  for ( i = 0; i < emitters.length; i++) {
    pushMatrix();
    translate(width / 2, height / 2);
    emitters[i].update();
    emitters[i].draw();
    popMatrix();
    //saveFrame("RainbowPartSmall/frames######.png");
  }  
}
class ColorCycle {
  
  int i = 0;
  float freq, oR, oG, oB, a;
  float[] rgbArray = new float[4];
  
  ColorCycle(float frequency, float offsetRed, float offsetGreen, float offsetBlue, float alpha) {
    freq = frequency;
    oR = offsetRed;
    oG = offsetGreen;
    oB = offsetBlue;
    a = alpha;
  }
  
  ColorCycle() {
    freq = 1;
    oR = 0;
    oG = 2;
    oB = 4;
    a = 255;
  }
  
  public float[] update() {
    rgbArray[0] = ((sin(radians(freq * i) + oR)) * 127) + 128;
    rgbArray[1] = ((sin(radians(freq * i) + oG)) * 127) + 128;
    rgbArray[2] = ((sin(radians(freq * i) + oB)) * 127) + 128;
    rgbArray[3] = a;
    i += 1;
    return rgbArray;
  }
}
class Emitter {

  int savedTime, // Used to detect how many milliseconds have passed
      i; // Variable for looping
  float frequency, // Frequency in milliseconds with which the Emitter spits out a particle
        friction;
  PVector position, // The x and y coordinates of the Emitter
          velocity, // The velocity in pixels per frame
          acceleration, // The acceleration in pixels per frame squared
          velSD, // The standard deviation for the velocity
          velMean, // Mean of the veloctity. Same deal for all following PVector declarations
          accelSD,
          accelMean;
  ArrayList<Particle> particles = new ArrayList<Particle>(); // Dynamic array of all active particles
  RNG rng = new RNG();
  float[] colorVals; // To store the RGBA color values generated by the ColorCycle
  ColorCycle cycle; // Color cycle to change the colors of the particles
  
  Emitter(PVector position_, PVector velocity_, PVector acceleration_, PVector velSD_, PVector velMean_, PVector accelSD_, PVector accelMean_, float friction_, float frequency_, ColorCycle cycle_) {
    position = position_;
    velocity = velocity_;
    acceleration = acceleration_;
    frequency = frequency_;
    velSD = velSD_;
    velMean = velMean_;
    accelSD = accelSD_;
    accelMean = accelMean_;
    friction = friction_;
    cycle = cycle_;
    colorVals = cycle.update();
    savedTime = millis();
  }
  
  public void draw() {

    if(particles.size() > 0) {

      for(i = 0; i < particles.size() - 1; i++) {
      
        Particle particle = particles.get(i);

        if(particle.position.x > (width / 2) || particle.position.x < (width / -2)) {
          particles.remove(i);
        }

        if(particle.position.y > (height / 2) || particle.position.y < (height / -2)) {
          particles.remove(i);
        }
        pushMatrix();
        translate(position.x, position.y);
        particle.draw();
        popMatrix();
      }

    }
      
  }
  
  public void update() {
    
    velocity.add(acceleration);
    position.add(velocity);
    int passedTime = millis() - savedTime;
    if( passedTime >= frequency) {
        emitParticle();
        savedTime = millis();
    }
    frequency -= 0.5f;
  }
  
  public void emitParticle() {
      PVector pVelocity = new PVector(random(-6, 6), random(-6, 6));
      PVector pAcceleration = new PVector(random(-0.200f, 0.200f), random(-0.200f, 0.200f));
      float pFriction = friction;
      float frequency = 0.5f;
      float amplitude = 10;
      int strokeWeight = (int)random(1, 10);
      
      colorVals = cycle.update();
      particles.add(new Particle(new PVector(0, 0), pVelocity, pAcceleration, frequency, amplitude, pFriction, colorVals, strokeWeight));
  }
}
class Particle {

  int strokeWeight,
      t = 0; // Time
  PVector position, // The x, y pixel coordinates of the particle
          velocity, // Velocity in pixels per frame of the particle
          acceleration,
          newPosition; // Acceleration in pixels per frame squared
  float friction,
        slope,
        angle,
        frequency,
        amplitude; // Amount of friction acting on the particle
  float[] colorVals;
  
  Particle(PVector position_, PVector velocity_, PVector acceleration_, float frequency_, float amplitude_, float friction_, float[] colorVals_, int strokeWeight_) {
    
    colorVals = colorVals_;
    strokeWeight = strokeWeight_;
    position = position_;
    velocity = velocity_;
    acceleration = acceleration_;
    friction = friction_;
    frequency = frequency_;
    amplitude = amplitude_;
    slope = velocity.x / velocity.y;
    angle = atan(slope);
  }
  
  public void draw() {
    update();
    pushMatrix();
    strokeWeight(strokeWeight);
    stroke(colorVals[0], colorVals[1], colorVals[2], colorVals[3]);
    popMatrix();
    pushMatrix();
    rotate(radians(angle));
    position.add(new PVector(0, sin(t * frequency) * amplitude));
    point(position.x, position.y);
    popMatrix();
    t++;
  }
  
  public void update() {
    velocity.add(acceleration);
    position.add(velocity);
    position.mult(friction);
  }
}
class RNG {

  Random generator = new Random();
  float num; // Generated number
        
  RNG() {
  }
  
  public float getGaussRand(float sd, float mean) {
    num = (((float) generator.nextGaussian()) * sd) + mean;
    return num;
  }
  
}
  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "Emitters" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
